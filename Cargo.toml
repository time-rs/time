[workspace]
default-members = ["time"]
members = ["time", "time-core", "time-macros"]
resolver = "2"

[workspace.dependencies]
time-core = { path = "time-core", version = "=0.1.6" }
time-macros = { path = "time-macros", version = "=0.2.24" }

criterion = { version = "0.5.1", default-features = false }
deranged = { version = "0.5.2", features = ["powerfmt"] }
itoa = "1.0.1"
js-sys = "0.3.58"
libc = "0.2.98"
num-conv = "0.1.0"
num_threads = "0.1.2"
powerfmt = { version = "0.2.0", default-features = false }
quickcheck = { version = "1.0.3", default-features = false }
quickcheck_macros = "1.0.0"
rand08 = { package = "rand", version = "0.8.4", default-features = false }
rand09 = { package = "rand", version = "0.9.2", default-features = false }
rstest = { version = "0.23.0", default-features = false }
rstest_reuse = "0.7.0"
# ^1.0.184 due to serde-rs/serde#2538
serde = { version = "1.0.184", default-features = false }
serde_core = { version = "1.0.220", default-features = false }
serde_json = "1.0.68"
serde_test = "1.0.126"
trybuild = "1.0.102"

[profile.dev]
debug = 0

[profile.test]
debug = 2

# Deny-by-default lints: These are lints that indicate a lack of compiler guarantees, future
# incompatibility (with no guarantees in the meantime) introduce surprising behavior, or are likely
# to cause undesired behavior. Code that trigger these lints should only be allowed with a
# compelling reason that is clearly documented.

# Warn-by-default lints: These are lints that indicate possible errors, future incompatibility
# (with guaranteed behavior in the meantime), or other stylistic issues (including idioms). Code
# that trigger these lints should not cause undesired behavior and may be allowed as necessary.

# All overrides need higher priority. Any overrides that are for a specific crate need to be done
# the "traditional" way of using attributes at the crate root.

[workspace.lints.rust]
ambiguous-glob-reexports = "deny"
clashing-extern-declarations = "deny"
const-item-mutation = "deny"
dangling-pointers-from-temporaries = "deny"
deref-nullptr = "deny"
drop-bounds = "deny"
future-incompatible = "deny"
hidden-glob-reexports = "deny"
improper-ctypes = "deny"
improper-ctypes-definitions = "deny"
invalid-from-utf8 = "deny"
invalid-macro-export-arguments = "deny"
invalid-nan-comparisons = "deny"
invalid-reference-casting = "deny"
invalid-value = "deny"
named-arguments-used-positionally = "deny"
non-ascii-idents = "deny"
opaque-hidden-inferred-bound = "deny"
overlapping-range-endpoints = "deny"
suspicious-double-ref-op = "deny"
unconditional-recursion = "deny"
unexpected_cfgs = { level = "deny", check-cfg = [
    "cfg(__ui_tests)",
    "cfg(bench)",
] }
unnameable-test-items = "deny"
unsafe-op-in-unsafe-fn = "deny"
unstable-syntax-pre-expansion = "deny"

keyword-idents = "warn"
let-underscore = "warn"
macro-use-extern-crate = "warn"
meta-variable-misuse = "warn"
missing-abi = "warn"
missing-copy-implementations = "warn"
missing-debug-implementations = "warn"
missing-docs = "warn"
noop-method-call = "warn"
single-use-lifetimes = "warn"
trivial-casts = "warn"
trivial-numeric-casts = "warn"
unreachable-pub = "warn"
unused = { level = "warn", priority = -1 }
unused-import-braces = "warn"
unused-lifetimes = "warn"
unused-qualifications = "warn"
variant-size-differences = "warn"

unstable-name-collisions = { level = "allow", priority = 1 } # overrides #![deny(future_incompatible)], temporary while `.cast_{un}signed()` is unstable

[workspace.lints.clippy]
alloc-instead-of-core = "deny"
std-instead-of-core = "deny"
undocumented-unsafe-blocks = "deny"

all = { level = "warn", priority = -1 }
as-underscore = "warn"
dbg-macro = "warn"
decimal-literal-representation = "warn"
explicit-auto-deref = "warn"
get-unwrap = "warn"
manual-let-else = "warn"
missing-docs-in-private-items = "warn"
missing-enforced-import-renames = "warn"
nursery = { level = "warn", priority = -1 }
obfuscated-if-else = "warn"
print-stdout = "warn"
semicolon-outside-block = "warn"
todo = "warn"
unimplemented = "warn"
uninlined-format-args = "warn"
unnested-or-patterns = "warn"
unwrap-in-result = "warn"
unwrap-used = "warn"
use-debug = "warn"

option-if-let-else = { level = "allow", priority = 1 }     # suggests terrible code, overrides #![warn(clippy::nursery)]
redundant-pub-crate = { level = "allow", priority = 1 }    # rust-lang/rust-clippy#5369, overrides #![warn(clippy::nursery)]
uninhabited-references = { level = "allow", priority = 1 } # rust-lang/rust-clippy#11984
incompatible-msrv = { level = "allow", priority = 1 }      # rust-lang/rust-clippy#12280

[workspace.lints.rustdoc]
private-doc-tests = "warn"
unescaped-backticks = "warn"
